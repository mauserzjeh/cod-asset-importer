from typing import List, Dict


class Loader:
    pass

class LoadedModel:
    def name(self) -> str: ...
    def angles(self) -> List[float]: ...
    def origin(self) -> List[float]: ...
    def scale(self) -> List[float]: ...
    def materials(self) -> List[LoadedMaterial]: ...
    def surfaces(self) -> List[LoadedSurface]: ...
    def bones(self) -> List[LoadedBone]: ...

class LoadedMaterial:
    def name(self) -> str: ...
    def textures(self) -> Dict[str, LoadedTexture]: ...

class LoadedTexture:
    def width(self) -> int: ...
    def height(self) -> int: ...
    def data(self) -> bytes: ...

class LoadedSurface:
    def vertices(self) -> List[LoadedVertex]: ...
    def triangles(self) -> List[List[float]]: ...

class LoadedVertex:
    def normal(self) -> List[float]: ...
    def color(self) -> List[float]: ...
    def uv(self) -> List[float]: ...
    def bone(self) -> int: ...
    def position(self) -> List[float]: ...
    def weights(self) -> List[LoadedWeight]: ...

class LoadedWeight:
    def bone(self) -> int: ...
    def influence(self) -> float: ...

class LoadedBone:
    def name(self) -> str: ...
    def parent(self) -> int: ...
    def position(self) -> List[float]: ...
    def rotation(self) -> List[float]: ...