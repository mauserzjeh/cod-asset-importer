from typing import List, Dict
import importer

def error_log(error: str) -> None: ...
def info_log(error: str) -> None: ...
def debug_log(error: str) -> None: ...

class IBSP_VERSIONS:
    V59: int
    V4: int

class XMODEL_VERSIONS:
    V14: int
    V20: int
    V25: int

class XMODEL_TYPES:
    RIGID: int
    ANIMATED: int
    VIEWMODEL: int
    PLAYERBODY: int
    VIEWHANDS: int

class Loader:
    def __init__(self, importer: importer.Importer) -> None: ...
    def import_bsp(self, asset_path: str, file_path: str) -> None: ...
    def import_xmodel(
        self,
        asset_path: str,
        file_path: str,
        angles: List[float],
        origin: List[float],
        scale: List[float],
    ) -> None: ...

class LoadedIbsp:
    def name(self) -> str: ...
    def materials(self) -> List[str]: ...
    def entities(self) -> List[LoadedIbspEntity]: ...
    def surfaces(self) -> List[LoadedIbspSurface]: ...

class LoadedIbspEntity:
    def name(self) -> str: ...
    def angles(self) -> List[float]: ...
    def origin(self) -> List[float]: ...
    def scale(self) -> List[float]: ...

class LoadedIbspSurface:
    def material(self) -> str: ...
    def vertices(self) -> Dict[int, LoadedVertex]: ...
    def triangles(self) -> List[List[int]]: ...

class LoadedModel:
    def name(self) -> str: ...
    def angles(self) -> List[float]: ...
    def origin(self) -> List[float]: ...
    def scale(self) -> List[float]: ...
    def materials(self) -> List[LoadedMaterial]: ...
    def surfaces(self) -> List[LoadedSurface]: ...
    def bones(self) -> List[LoadedBone]: ...

class LoadedMaterial:
    def name(self) -> str: ...
    def version(self) -> int: ...
    def textures(self) -> Dict[str, LoadedTexture]: ...

class LoadedTexture:
    def width(self) -> int: ...
    def height(self) -> int: ...
    def data(self) -> bytes: ...
    def texture_type(self) -> str: ...

class LoadedSurface:
    def vertices(self) -> List[LoadedVertex]: ...
    def triangles(self) -> List[List[int]]: ...

class LoadedVertex:
    def normal(self) -> List[float]: ...
    def color(self) -> List[float]: ...
    def uv(self) -> List[float]: ...
    def bone(self) -> int: ...
    def position(self) -> List[float]: ...
    def weights(self) -> List[LoadedWeight]: ...

class LoadedWeight:
    def bone(self) -> int: ...
    def influence(self) -> float: ...

class LoadedBone:
    def name(self) -> str: ...
    def parent(self) -> int: ...
    def position(self) -> List[float]: ...
    def rotation(self) -> List[float]: ...
